package com.aplica.andres.adminsqlite;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;

public class AdminSQLite extends SQLiteOpenHelper {
    public AdminSQLite(Context context, String nombre, SQLiteDatabase.CursorFactory factory, int version) {
        super(context, nombre, factory, version);
    }
    @Override
    public void onCreate(SQLiteDatabase db) {
        //aqu√≠ creamos la tabla de usuario (dni, nombre, ciudad, numero)
        //db.execSQL("create table equipo(id varchar(20) primary key, estado text, sede text, sala integer)");
        db.execSQL("CREATE TABLE Estudiante ( Nombre VARCHAR ( 30 ) NOT NULL, Telefono NUMERIC NOT NULL, Direccion VARCHAR ( 30 ) NOT NULL, Codigo INTEGER NOT NULL, PRIMARY KEY(Codigo) )");
        db.execSQL("CREATE TABLE Prestamo ( Estudiante_Nombre VARCHAR(30) NOT NULL , Cod_prestamo INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL , F_ingredo DATETIME NOT NULL , F_salida DATETIME NOT NULL , Equipos_Prestamo_Cod_prestamo INTEGER , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30), Equipos_Serial NUMERIC , FOREIGN KEY (Estudiante_Nombre) REFERENCES Estudiante(Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial) )");
        db.execSQL("CREATE TABLE Sala ( Equipos_Serial NUMERIC  , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30) , Equipos_Prestamo_Cod_prestamo INTEGER  , Aula VARCHAR(30) NOT NULL , Descripcion VARCHAR(30) NOT NULL , Area VARCHAR(30) NOT NULL , Equipamiento VARCHAR(30) NOT NULL , FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), PRIMARY KEY(Equipos_Serial,Equipos_Prestamo_Estudiante_Nombre,Equipos_Prestamo_Cod_prestamo,Aula) )");
        db.execSQL("CREATE TABLE Aplicaciones ( Equipos_Serial NUMERIC  , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30)  , Equipos_Prestamo_Cod_prestamo INTEGER  , Nombre VARCHAR(30) NOT NULL , Version VARCHAR(30) NOT NULL , Licencia VARCHAR(30) NOT NULL , FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), PRIMARY KEY(Equipos_Serial,Equipos_Prestamo_Estudiante_Nombre,Equipos_Prestamo_Cod_prestamo,Nombre) )");
        db.execSQL("CREATE TABLE Equipos ( Prestamo_Cod_prestamo INTEGER  , Prestamo_Estudiante_Nombre VARCHAR(30)  , Serial NUMERIC NOT NULL , Marca VARCHAR(20) NOT NULL , Estado VARCHAR(20) NOT NULL , Internet BOOL NOT NULL , Aplicaciones_Equipos_Serial NUMERIC  , Aplicaciones_Equipos_Prestamo_Estudiante_Nombre VARCHAR(30)  , Aplicaciones_Equipos_Prestamo_Cod_prestamo INTEGER  , Aplicaciones_Nombre VARCHAR(30)  , Sala_Equipos_Serial NUMERIC NOT NULL , Sala_Equipos_Prestamo_Estudiante_Nombre VARCHAR(30) NOT NULL , Sala_Equipos_Prestamo_Cod_prestamo INTEGER NOT NULL , Sala_Aula VARCHAR(30) NOT NULL , FOREIGN KEY (Prestamo_Cod_prestamo) REFERENCES Prestamo(Cod_prestamo), FOREIGN KEY (Prestamo_Estudiante_Nombre) REFERENCES Prestamo(Estudiante_Nombre), FOREIGN KEY (Aplicaciones_Equipos_Serial) REFERENCES Aplicaciones(Equipos_Serial), FOREIGN KEY (Aplicaciones_Equipos_Prestamo_Estudiante_Nombre) REFERENCES Aplicaciones(Equipos_Prestamo_Estudiante_Nombre), FOREIGN KEY (Aplicaciones_Equipos_Prestamo_Cod_prestamo) REFERENCES Aplicaciones(Equipos_Prestamo_Cod_prestamo), FOREIGN KEY (Aplicaciones_Nombre) REFERENCES Aplicaciones(Nombre), FOREIGN KEY (Sala_Equipos_Serial) REFERENCES Sala(Equipos_Serial), FOREIGN KEY (Sala_Equipos_Prestamo_Estudiante_Nombre) REFERENCES Sala(Equipos_Prestamo_Estudiante_Nombre), FOREIGN KEY (Sala_Equipos_Prestamo_Cod_prestamo) REFERENCES Sala(Equipos_Prestamo_Cod_prestamo), FOREIGN KEY (Sala_Aula) REFERENCES Sala(Aula), PRIMARY KEY(Prestamo_Cod_prestamo,Prestamo_Estudiante_Nombre,Serial) )");
    }
    @Override
    public void onUpgrade(SQLiteDatabase db, int version1, int version2) {
        db.execSQL("drop table if exists Estudiante");
        db.execSQL("drop table if exists Prestamo");
        db.execSQL("drop table if exists Sala");
        db.execSQL("drop table if exists Aplicaciones");
        db.execSQL("drop table if exists Equipos");
        //db.execSQL("create table equipo(id integer primary key, estado text, sede text, sala integer)");
        db.execSQL("CREATE TABLE Estudiante ( Nombre VARCHAR ( 30 ) NOT NULL, Telefono NUMERIC NOT NULL, Direccion VARCHAR ( 30 ) NOT NULL, Codigo INTEGER, PRIMARY KEY(Codigo) )");
        db.execSQL("CREATE TABLE Prestamo ( Estudiante_Nombre VARCHAR(30) NOT NULL , Cod_prestamo INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL , F_ingredo DATETIME NOT NULL , F_salida DATETIME NOT NULL , Equipos_Prestamo_Cod_prestamo INTEGER , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30), Equipos_Serial NUMERIC , FOREIGN KEY (Estudiante_Nombre) REFERENCES Estudiante(Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial) )");
        db.execSQL("CREATE TABLE Sala ( Equipos_Serial NUMERIC  , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30) , Equipos_Prestamo_Cod_prestamo INTEGER  , Aula VARCHAR(30) NOT NULL , Descripcion VARCHAR(30) NOT NULL , Area VARCHAR(30) NOT NULL , Equipamiento VARCHAR(30) NOT NULL , FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), PRIMARY KEY(Equipos_Serial,Equipos_Prestamo_Estudiante_Nombre,Equipos_Prestamo_Cod_prestamo,Aula) )");
        db.execSQL("CREATE TABLE Aplicaciones ( Equipos_Serial NUMERIC  , Equipos_Prestamo_Estudiante_Nombre VARCHAR(30)  , Equipos_Prestamo_Cod_prestamo INTEGER  , Nombre VARCHAR(30) NOT NULL , Version VARCHAR(30) NOT NULL , Licencia VARCHAR(30) NOT NULL , FOREIGN KEY (Equipos_Serial) REFERENCES Equipos(Serial), FOREIGN KEY (Equipos_Prestamo_Estudiante_Nombre) REFERENCES Equipos(Prestamo_Estudiante_Nombre), FOREIGN KEY (Equipos_Prestamo_Cod_prestamo) REFERENCES Equipos(Prestamo_Cod_prestamo), PRIMARY KEY(Equipos_Serial,Equipos_Prestamo_Estudiante_Nombre,Equipos_Prestamo_Cod_prestamo,Nombre) )");
        db.execSQL("CREATE TABLE Equipos ( Prestamo_Cod_prestamo INTEGER  , Prestamo_Estudiante_Nombre VARCHAR(30)  , Serial NUMERIC NOT NULL , Marca VARCHAR(20) NOT NULL , Estado VARCHAR(20) NOT NULL , Internet BOOL NOT NULL , Aplicaciones_Equipos_Serial NUMERIC  , Aplicaciones_Equipos_Prestamo_Estudiante_Nombre VARCHAR(30)  , Aplicaciones_Equipos_Prestamo_Cod_prestamo INTEGER  , Aplicaciones_Nombre VARCHAR(30)  , Sala_Equipos_Serial NUMERIC NOT NULL , Sala_Equipos_Prestamo_Estudiante_Nombre VARCHAR(30) NOT NULL , Sala_Equipos_Prestamo_Cod_prestamo INTEGER NOT NULL , Sala_Aula VARCHAR(30) NOT NULL , FOREIGN KEY (Prestamo_Cod_prestamo) REFERENCES Prestamo(Cod_prestamo), FOREIGN KEY (Prestamo_Estudiante_Nombre) REFERENCES Prestamo(Estudiante_Nombre), FOREIGN KEY (Aplicaciones_Equipos_Serial) REFERENCES Aplicaciones(Equipos_Serial), FOREIGN KEY (Aplicaciones_Equipos_Prestamo_Estudiante_Nombre) REFERENCES Aplicaciones(Equipos_Prestamo_Estudiante_Nombre), FOREIGN KEY (Aplicaciones_Equipos_Prestamo_Cod_prestamo) REFERENCES Aplicaciones(Equipos_Prestamo_Cod_prestamo), FOREIGN KEY (Aplicaciones_Nombre) REFERENCES Aplicaciones(Nombre), FOREIGN KEY (Sala_Equipos_Serial) REFERENCES Sala(Equipos_Serial), FOREIGN KEY (Sala_Equipos_Prestamo_Estudiante_Nombre) REFERENCES Sala(Equipos_Prestamo_Estudiante_Nombre), FOREIGN KEY (Sala_Equipos_Prestamo_Cod_prestamo) REFERENCES Sala(Equipos_Prestamo_Cod_prestamo), FOREIGN KEY (Sala_Aula) REFERENCES Sala(Aula), PRIMARY KEY(Prestamo_Cod_prestamo,Prestamo_Estudiante_Nombre,Serial) )");
    }
}